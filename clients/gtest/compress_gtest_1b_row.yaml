---
include: hipsparselt_common.yaml
include: known_bugs.yaml
include: spmm_common_16_row.yaml

Definitions:
  - &alpha_beta_range
    - { alpha:  1, beta:  0 }

  - &transA_transB_range
    - { transA: N, transB: N }
    - { transA: T, transB: T }

Tests:
- name: compress_bad_arg
  category: pre_checkin
  function:
    - compress_bad_arg: *real_precisions_1b
  transA: N
  transB: N
  fortran: [ false, true ]
# Split *real_precisions_1b into *int8 and *nonint8_real_precisions. Since int8 has flags 0,1

- name: compress_small
  category: quick
  function:
    compress: *real_precisions_1b_input
  matrix_size: *small_matrix_size_range
  transA_transB: *transA_transB_range
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: compress_medium
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  matrix_size: *medium_matrix_size_range
  transA_transB: *transA_transB_range
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: compress_medium_HMM
  category: HMM
  function:
    compress: *real_precisions_1b_input
  matrix_size: *medium_matrix_size_range
  transA: [ N ]
  transB: [ N ]
  alpha: 1
  beta: 1
  HMM: true
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: compress_chunk
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  matrix_size: *chunk_matrix_size_range
  transA_transB: *transA_transB_range
  alpha: 2
  beta: 3
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

# Split *int8_half_single_precisions into *int8 and *half_single_precisions. Since int8 has flags 0,1

- name: compress_deepbench
  category: nightly
  function:
    compress: *real_precisions_1b_input
  matrix_size: *deepbench_sizes
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: resnet50_fwd
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: N
  transB: N
  matrix_size: *resnet50_fwd_sizes
  alpha: 1
  beta: 0
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: resnet50_bwdwrw
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: T
  transB: N
  matrix_size: *resnet50_bwdwrw_sizes
  alpha: 1
  beta: 1
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: resnet50_bwddata
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: N
  transB: T
  matrix_size: *resnet50_bwddata_sizes
  alpha: 1
  beta: 0
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: inception4_fwd
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: N
  transB: N
  matrix_size: *inception4_fwd_sizes
  alpha: 1
  beta: 0
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: inception4_bwdwrw
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: T
  transB: N
  matrix_size: *inception4_bwdwrw_sizes
  alpha: 1
  beta: 1
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: inception4_bwddata
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: N
  transB: T
  matrix_size: *inception4_bwddata_sizes
  alpha: 1
  beta: 0
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: ctest_bwdwrw
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: T
  transB: N
  alpha: 1
  beta: 1
  matrix_size: *ctest_bwdwrw_sizes
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: ctest_fwd
  category: nightly
  function:
    compress: *real_precisions_1b_input
  transA: N
  transB: N
  alpha: 1
  beta: 0
  matrix_size: *ctest_fwd_sizes
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]

- name: compress_16
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 16
  N: 16
  K: 16
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_32_16_128
  category: nightly
  function:
    compress: *real_precisions_1b_input
  M: [16, 32, 48, 64, 80, 96, 112, 128]
  N: 32
  K: 32
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_48_16_128
  category: nightly
  function:
    compress: *real_precisions_1b_input
  M: 48
  N: [16, 32, 48, 64, 80, 96, 112, 128]
  K: 48
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_64_16_128
  category: nightly
  function:
    compress: *real_precisions_1b_input
  M: 64
  N: 64
  K: [16, 32, 48, 64, 80, 96, 112, 128]
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_64_16_16
  category: quick
  function:
    compress: *real_precisions_1b_input
  M: 64
  N: 16
  K: 16
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_16_64
  category: quick
  function:
    compress: *real_precisions_1b_input
  M: 16
  N: 16
  K: 64
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_96
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 96
  N: 96
  K: 96
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_128
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 128
  N: 128
  K: 128
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_256
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 256
  N: 256
  K: 256
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_256_9_12_16
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 256
  N: 16
  K: 16
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_16_256_16
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 16
  N: 256
  K: 16
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_16_16_256
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input

  M: 16
  N: 16
  K: 256
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_512
  category: pre_checkin
  function:
    compress: *real_precisions_1b_input
  M: 512
  N: 512
  K: 512
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_1024
  category: nightly
  function:
    compress: *real_precisions_1b_input
  M: [1008, 1024, 1040]
  N: [1008, 1024, 1040]
  K: 1024
  alpha_beta: *alpha_beta_range
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
  transA_transB: *transA_transB_range

- name: compress_small2
  category: pre_checkin
  transA: N
  transB: N
  function:
    compress: *real_precisions_1b_input
  matrix_size:
    - { M:  512, N:  512, K:  512 }
    - { M: 960,  N: 1024, K: 1024 }
    - { M: 1024, N: 1024, K: 1024 }
  sparse_b: [ true, false]
  orderA: [R]
  orderB: [R]
  orderC: [R]
  orderD: [R]
...
